{"meta":{"title":"秋季的blog","subtitle":"everyday","description":"","author":"他维忠","url":"http://peapod.top","root":"/"},"pages":[{"title":"所有分类","date":"2022-09-08T11:04:02.000Z","updated":"2022-09-08T11:13:14.433Z","comments":true,"path":"categories/index.html","permalink":"http://peapod.top/categories/index.html","excerpt":"","text":""},{"title":"about","date":"2022-09-08T11:03:19.000Z","updated":"2022-09-08T11:13:17.022Z","comments":true,"path":"about/index.html","permalink":"http://peapod.top/about/index.html","excerpt":"","text":"人的一生"},{"title":"examples","date":"2022-09-08T11:08:04.000Z","updated":"2022-09-08T11:08:04.439Z","comments":true,"path":"examples/index.html","permalink":"http://peapod.top/examples/index.html","excerpt":"","text":""},{"title":"我的朋友们","date":"2022-09-08T11:04:53.000Z","updated":"2022-09-08T11:28:26.245Z","comments":true,"path":"friends/index.html","permalink":"http://peapod.top/friends/index.html","excerpt":"这里写友链上方的内容。","text":"这里写友链上方的内容。 这里可以写友链页面下方的文字备注，例如自己的友链规范、示例等。"},{"title":"mylist","date":"2022-09-08T11:04:41.000Z","updated":"2022-09-08T11:14:29.641Z","comments":true,"path":"mylist/index.html","permalink":"http://peapod.top/mylist/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2022-09-08T11:04:28.000Z","updated":"2022-09-08T11:13:12.753Z","comments":true,"path":"tags/index.html","permalink":"http://peapod.top/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"BeeGo教程","slug":"BeeGo教程","date":"2022-09-13T08:36:10.000Z","updated":"2022-09-13T09:08:21.976Z","comments":true,"path":"2022/09/13/BeeGo教程/","link":"","permalink":"http://peapod.top/2022/09/13/BeeGo%E6%95%99%E7%A8%8B/","excerpt":"","text":"Beego 框架1.beego框架 工作流程beego框架是一个使用Go语言快速开发API、Web及后端服务等各种应用的MVC框架。beego是一个完整的MVC框架，包括controller、model以及view等MVC必备模板。 HTTP请求从main函数进入框架 解析url路由，确定执行那个控制器 执行前请求过滤器 执行控制器 执行请求后的过滤器 输出结果 2.beego框架 安装 设置代理 &#96;&#96;&#96;bash$ go env -w GO111MODULE&#x3D;on$ go env -w GOPROXY&#x3D;https://goproxy.cn,direct12345- 安装beego和bee（项目工具） - ```bash $ go get github.com/beego/beego 使用bee创建项目 &#96;&#96;&#96;bashbee new 项目名称123456789- 项目结构 - ![image-20220913170626595](../images/image-20220913170626595.png)- 运行项目 - ```bash bee run","categories":[{"name":"Web","slug":"Web","permalink":"http://peapod.top/categories/Web/"}],"tags":[{"name":"beego","slug":"beego","permalink":"http://peapod.top/tags/beego/"}],"author":"taweizhong"},{"title":"匿名函数用作回调函数","slug":"匿名函数用作回调函数","date":"2022-09-09T07:32:30.000Z","updated":"2022-09-13T09:11:55.023Z","comments":true,"path":"2022/09/09/匿名函数用作回调函数/","link":"","permalink":"http://peapod.top/2022/09/09/%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E7%94%A8%E4%BD%9C%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/","excerpt":"","text":"匿名函数用作回调函数123456789101112131415package mainimport &quot;fmt&quot;func fun(list []int, f func(int))&#123; for _, v := range list &#123; f(v) &#125;&#125;func main() &#123; fun([]int&#123;1, 2, 3, 4, 5&#125;, func(n int) &#123; fmt.Printf(&quot;n: %v\\n&quot;, n) &#125;)&#125; 先执行fun()函数 在执行f(v)的时候回调 传值的匿名函数。会将参数v的值传递给匿名函数的形参，在你匿名函数实现打印。","categories":[{"name":"笔记","slug":"笔记","permalink":"http://peapod.top/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Go","slug":"Go","permalink":"http://peapod.top/tags/Go/"}],"author":"taweizhong"},{"title":"Go设计模式","slug":"go工厂模式","date":"2022-09-09T00:54:08.000Z","updated":"2022-09-11T00:43:55.928Z","comments":true,"path":"2022/09/09/go工厂模式/","link":"","permalink":"http://peapod.top/2022/09/09/go%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/","excerpt":"","text":"Go 设计模式工厂设计模式123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293package maintype an interface&#123; eat() call()&#125;type cat struct&#123; name string&#125;type dog struct&#123; name string&#125;func (*cat)eat()&#123; fmt.Println(&quot;cat eat&quot;)&#125;func (*cat)call()&#123; fmt.Println(&quot;cat call&quot;)&#125;func (*dog)eat()&#123; fmt.Println(&quot;dog eat&quot;)&#125;func (*dog)call()&#123; fmt.Println(&quot;dog call&quot;)&#125;func fun(i int) an &#123; if i == 1 &#123; return &amp;cat&#123;&#125; &#125; else &#123; return &amp;dog&#123;&#125; &#125;&#125;// 多态 向上转型func main()&#123; cat := fun(1) cat.eat() cat.call() dog := fun(2) dog.eat() dog.call()&#125;``` &gt; 将实现接口的对象赋值与接口变量### 单例设计模式 一个类只有一个对象实例```gopackage mainimport ( &quot;fmt&quot; &quot;sync&quot;)type Sing interface &#123; do()&#125;type some struct &#123;&#125;func (*some) do() &#123; fmt.Println(&quot;do some&quot;)&#125;var ( once sync.Once s *some)func Fun() Sing &#123; once.Do( func() &#123; s = &amp;some&#123;&#125; &#125;, ) return s&#125;func main() &#123; s1 := Fun() fmt.Printf(&quot;s1: %p\\n&quot;, s1) s2 := Fun() fmt.Printf(&quot;s1: %p\\n&quot;, s2)&#125; 抽象工厂模式构建者模式","categories":[{"name":"笔记","slug":"笔记","permalink":"http://peapod.top/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Go","slug":"Go","permalink":"http://peapod.top/tags/Go/"}],"author":"taweizhong"},{"title":"部署测试","slug":"部署测试","date":"2022-09-08T12:21:54.000Z","updated":"2022-09-08T12:46:47.021Z","comments":true,"path":"2022/09/08/部署测试/","link":"","permalink":"http://peapod.top/2022/09/08/%E9%83%A8%E7%BD%B2%E6%B5%8B%E8%AF%95/","excerpt":"","text":"这是一个测试文件","categories":[],"tags":[{"name":"测试","slug":"测试","permalink":"http://peapod.top/tags/%E6%B5%8B%E8%AF%95/"}],"author":"taweizhong"},{"title":"Hello World","slug":"hello-world","date":"2022-09-08T07:58:15.170Z","updated":"2022-09-08T07:27:56.128Z","comments":true,"path":"2022/09/08/hello-world/","link":"","permalink":"http://peapod.top/2022/09/08/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"说明","slug":"说明","permalink":"http://peapod.top/categories/%E8%AF%B4%E6%98%8E/"}],"tags":[{"name":"说明","slug":"说明","permalink":"http://peapod.top/tags/%E8%AF%B4%E6%98%8E/"}],"author":"taweizhong"},{"title":"Gin访问静态文件和模板文件","slug":"Gin访问静态文件和模板文件","date":"2022-09-05T03:26:27.000Z","updated":"2022-09-07T03:47:52.000Z","comments":true,"path":"2022/09/05/Gin访问静态文件和模板文件/","link":"","permalink":"http://peapod.top/2022/09/05/Gin%E8%AE%BF%E9%97%AE%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E5%92%8C%E6%A8%A1%E6%9D%BF%E6%96%87%E4%BB%B6/","excerpt":"","text":"Gin访问静态文件和模板文件1234567891011121314151617181920212223package mainimport ( &quot;github.com/gin-gonic/gin&quot;)func gologin(c *gin.Context)&#123; c.HTML(200, &quot;login.html&quot;, nil)&#125;func login(c *gin.Context)&#123; username := c.PostForm(&quot;username&quot;) password := c.PostForm(&quot;password&quot;) c.HTML(200, &quot;index.html&quot;, gin.H&#123; &quot;username&quot;: username, &quot;password&quot;: password, &#125;)&#125;func main()&#123; e := gin.Default() e.Static(&quot;/assets&quot;, &quot;./assets&quot;) e.LoadHTMLGlob(&quot;tempates/*&quot;) e.GET(&quot;/login&quot;, gologin) e.POST(&quot;/login&quot;, login) e.Run()&#125; e.Static(&quot;/assets&quot;, &quot;./assets&quot;)读取css和js等静态文件 e.LoadHTMLGlob(&quot;tempates/*&quot;)读取html等模板文件","categories":[{"name":"Web","slug":"Web","permalink":"http://peapod.top/categories/Web/"}],"tags":[{"name":"Gin","slug":"Gin","permalink":"http://peapod.top/tags/Gin/"}],"author":"taweizhong"},{"title":"Gin数据绑定","slug":"Gin数据绑定","date":"2022-09-05T03:26:14.000Z","updated":"2022-09-07T03:49:06.000Z","comments":true,"path":"2022/09/05/Gin数据绑定/","link":"","permalink":"http://peapod.top/2022/09/05/Gin%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/","excerpt":"","text":"Gin数据绑定POST和GET参数绑定123456789101112131415161718192021package mainimport &quot;github.com/gin-gonic/gin&quot;type User struct&#123; Uaername string `form:&quot;username&quot;` Password string `form:&quot;password&quot;`&#125;func login(c *gin.Context)&#123; var user User c.ShouldBind(&amp;user) // form表单绑定结构体 c.String(200, &quot;User:%s&quot;, user)&#125;func main() &#123; e := gin.Default() // localhost:8080/login?username=taweizhong&amp;password=111 可以绑定查询参数 e.POST(&quot;/login&quot;, login) e.Run()&#125; 路径绑定123456789101112131415161718192021package mainimport ( &quot;github.com/gin-gonic/gin&quot;)type User struct&#123; Uaername string `uri:&quot;username&quot;` Password string `uri:&quot;password&quot;`&#125;func login(c *gin.Context)&#123; var user User c.ShouldBindUri(&amp;user) c.String(200, &quot;User:%s&quot;, user)&#125;func main()&#123; e := gin.Default() // localhost:8080/login/taweizhong/111 e.GET(&quot;/login/:username/:password&quot;, login) e.Run()&#125;","categories":[{"name":"Web","slug":"Web","permalink":"http://peapod.top/categories/Web/"}],"tags":[{"name":"Gin","slug":"Gin","permalink":"http://peapod.top/tags/Gin/"}],"author":"taweizhong"},{"title":"Gin获取请求参数","slug":"Gin获取请求参数","date":"2022-09-05T03:25:57.000Z","updated":"2022-09-07T03:48:40.000Z","comments":true,"path":"2022/09/05/Gin获取请求参数/","link":"","permalink":"http://peapod.top/2022/09/05/Gin%E8%8E%B7%E5%8F%96%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0/","excerpt":"","text":"Gin获取请求参数GET请求参数12345678910111213141516package mainimport ( &quot;github.com/gin-gonic/gin&quot;)func login(c *gin.Context)&#123; key := c.Query(&quot;wd&quot;) // value := c.DefaultQuery(&quot;wd&quot;, &quot;世界&quot;) 查询不到用默认值 c.String(200, key)&#125;func main()&#123; e := gin.Default() e.GET(&quot;/login&quot;, login) e.Run()&#125; POST请求参数12345func fun(c *gin.Context)&#123; username := c.PostForm(&quot;username&quot;) password := c.DefaultPostForm(&quot;password&quot;) // 查询不到用默认值 c.String(200, username)&#125; 路径参数12345678910111213141516package mainimport ( &quot;github.com/gin-gonic/gin&quot;)func login(c *gin.Context)&#123; s := c.Param(&quot;username&quot;) c.String(200, s)&#125;func main()&#123; e := gin.Default() // localhost:8080/login/taweizhong e.GET(&quot;/login/:username&quot;, login) e.Run()&#125;","categories":[{"name":"Web","slug":"Web","permalink":"http://peapod.top/categories/Web/"}],"tags":[{"name":"Gin","slug":"Gin","permalink":"http://peapod.top/tags/Gin/"}],"author":"taweizhong"},{"title":"Gin处理form表单","slug":"Gin处理form表单","date":"2022-09-05T03:25:22.000Z","updated":"2022-09-08T11:15:34.784Z","comments":true,"path":"2022/09/05/Gin处理form表单/","link":"","permalink":"http://peapod.top/2022/09/05/Gin%E5%A4%84%E7%90%86form%E8%A1%A8%E5%8D%95/","excerpt":"","text":"Gin处理form表单go程序1234567891011121314151617181920212223package mainimport ( &quot;github.com/gin-gonic/gin&quot;)func gologin(c *gin.Context)&#123; c.HTML(200, &quot;login.html&quot;, nil)&#125;func login(c *gin.Context)&#123; username := c.PostForm(&quot;username&quot;) password := c.PostForm(&quot;password&quot;) c.HTML(200, &quot;index.html&quot;, gin.H&#123; &quot;username&quot;: username, &quot;password&quot;: password, &#125;)&#125;func main()&#123; e := gin.Default() e.Static(&quot;assets&quot;, &quot;./assets&quot;) e.LoadHTMLGlob(&quot;tempates/*&quot;) e.GET(&quot;/login&quot;, gologin) e.POST(&quot;/login&quot;, login) e.Run()&#125; index.html1234567891011121314&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;主页&lt;/h1&gt; &#123;&#123;.name&#125;&#125; &#123;&#123;.password&#125;&#125;&lt;/body&gt;&lt;/html&gt; login.html123456789101112131415161718192021222324252627282930313233343536&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;./assets/css/login.css&quot;&gt; &lt;title&gt;login&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;form-container&quot;&gt; &lt;div class=&quot;formleft&quot;&gt; &lt;img src=&quot;./assets/img/touxiang.png&quot;&gt; &lt;/div&gt; &lt;div class=&quot;formright&quot;&gt; &lt;h1&gt;欢迎回来&lt;/h1&gt; &lt;p class=&quot;py-1&quot;&gt;请先登录&lt;/p&gt; &lt;form action=&quot;/login&quot; method=&quot;post&quot;&gt; &lt;label&gt; &lt;p&gt;用户名&lt;/p&gt; &lt;input type=&quot;text&quot; name=&quot;user&quot; class=&quot;user-input&quot;&gt; &lt;/label&gt; &lt;label&gt; &lt;p&gt;密码&lt;/p&gt; &lt;input type=&quot;password&quot; name=&quot;password&quot; class=&quot;pw-input&quot;&gt; &lt;/label&gt; &lt;button class=&quot;login&quot; type=&quot;submit&quot;&gt;登录&lt;/button&gt; &lt;/form&gt; &lt;a href=&quot;./register&quot;&gt;&lt;button class=&quot;qiehuan&quot; type=&quot;submit&quot;&gt;注册&lt;/button&gt;&lt;/button&gt;&lt;/a&gt; &lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 当有多选框时，使用c.PostFormArray(&quot;name&quot;)函数得到参数数组。","categories":[{"name":"Web","slug":"Web","permalink":"http://peapod.top/categories/Web/"}],"tags":[{"name":"Gin","slug":"Gin","permalink":"http://peapod.top/tags/Gin/"}],"author":"taweizhong"},{"title":"css简介","slug":"css简介","date":"2022-08-27T07:48:03.000Z","updated":"2022-09-08T12:00:56.846Z","comments":true,"path":"2022/08/27/css简介/","link":"","permalink":"http://peapod.top/2022/08/27/css%E7%AE%80%E4%BB%8B/","excerpt":"","text":"css简介CSS 是“Cascading Style Sheet”的缩写，中文意思为“层叠样式表”，它是一种标准的样式表语言，用于描述网页的表现形式（例如网页元素的位置、大小、颜色等）。 CSS 的主要作用是定义网页的样式（美化网页），对网页中元素的位置、字体、颜色、背景等属性进行精确控制。 css特点在网页中实现各式各样的效果，例如： 为任何元素设置不同的边框，以及边框与元素之间的内外间距； 改变文字的大小、颜色、字体，为文字添加修饰（例如下划线、删除线）； 为网页设置背景颜色或者背景图片等等。 可以对同一个 HTML 元素多次定义 CSS 样式，后面定义的样式会覆盖前面定义的样式。 css语法规则CSS 样式规则由三个部分组成，分别是选择器、属性和值： 选择器：由 HTML 元素的 id、class 属性或元素名本身以及一些特殊符号构成，用来指定要为哪个 HTML 元素定义样式，例如选择器p就表示为页面中的所有&lt;p&gt;标签定义样式； 属性：给 HTML 元素设置的样式名称，由一系列关键词组成，例如 color（颜色）、border（边框）、font（字体）等，CSS 中提供了众多属性，您可以通过 W3C 官网查看； 值：由数值和单位或者关键字组成，用来控制某个属性的显示效果，例如 color 属性的值可以是 red 或 #F1F1F1 等。 在 CSS 的语法规则中，属性和值之间需要使用冒号:进行分隔，每个属性和值的组合可以看作一个声明，每个声明的末尾都需要使用分号;作为结尾，属于同一选择器的声明需要使用花括号&#123; &#125;包裹起来。","categories":[{"name":"前端","slug":"前端","permalink":"http://peapod.top/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"css","slug":"css","permalink":"http://peapod.top/tags/css/"}],"author":"taweizhong"},{"title":"vim常用命令","slug":"vim常用命令","date":"2022-08-27T04:23:00.000Z","updated":"2022-09-07T03:51:28.000Z","comments":true,"path":"2022/08/27/vim常用命令/","link":"","permalink":"http://peapod.top/2022/08/27/vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","excerpt":"","text":"vim常用命令命令模式 快捷键 功能描述 gg 光标移动到文档首行 G 光标移动到文档尾行 ctrl+b或pageUp键 翻屏操作，向上翻 ctrl+f或pageDn键 翻屏操作，向下翻 数字+G 快速将光标移动到指定行 shift+6 光标移动到行首 shift+4 光标移动到行尾 数字+上下方向键 以当前光标为准，向上&#x2F;下移动n行 数字+左右方向键 以当前光标为准，向左&#x2F;右移动n个字符 ctrl+v + 方向键+yy ctrl+v，并按方向键选中区块，按下yy复制 p 将剪贴板中的内容粘贴到光标后 dd 删除光标所在行，删除之后，下一行上移 D 删除光标位置到行尾的内容，删除之后，下一行不上移 :a1,a2d 删除从 a1 行到 a2 行的文本内容 u 撤销 ctrl+r 恢复 末行模式 命令 功能描述 :wq 保存并退出 Vim 编辑器 :wq! 保存并强制退出 Vim 编辑器 :q 不保存就退出 Vim 编辑器 :q! 不保存，且强制退出 Vim 编辑器 &#x2F;abc 从光标所在位置向前查找字符串 abc &#x2F;^abc 查找以 abc 为行首的行 &#x2F;abc$ 查找以 abc 为行尾的行 ?abc 从光标所在位置向后查找字符串 abc : set nu 行号显示 : syntax on&#x2F;off 代码颜色显示 更多点击查看更多","categories":[{"name":"实用","slug":"实用","permalink":"http://peapod.top/categories/%E5%AE%9E%E7%94%A8/"}],"tags":[{"name":"vim","slug":"vim","permalink":"http://peapod.top/tags/vim/"}],"author":"taweizhong"},{"title":"HTML标签","slug":"HTML标签","date":"2022-08-27T03:19:09.000Z","updated":"2022-09-08T07:19:28.016Z","comments":true,"path":"2022/08/27/HTML标签/","link":"","permalink":"http://peapod.top/2022/08/27/HTML%E6%A0%87%E7%AD%BE/","excerpt":"","text":"HTML标签标题标签HTML 中提供了从&lt;h1&gt;到&lt;h6&gt;六个级别的标题标签，&lt;h1&gt;标签的级别最高，&lt;h6&gt;标签的级别最低，通过这些标签可以定义网页中的标题（与 word 中的标题类似），合理使用标题可以使网页的层次结构更加清晰。 123456789101112131415&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;mate charset=&quot;utf-8&quot;&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;h1 标题&lt;/h1&gt; &lt;h2&gt;h2 标题&lt;/h2&gt; &lt;h3&gt;h3 标题&lt;/h3&gt; &lt;h4&gt;h4 标题&lt;/h4&gt; &lt;h5&gt;h5 标题&lt;/h5&gt; &lt;h6&gt;h6 标题&lt;/h6&gt;&lt;/body&gt;&lt;/html&gt; 段落标签HTML 中可以使用段落标签 &lt;p&gt;来将文档中的内容分割为若干个段落。 1&lt;p&gt;段落中的内容。&lt;/p&gt; 1234567891011&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;mate charset=&quot;utf-8&quot;&gt;&lt;/head&gt;&lt;body&gt; &lt;p&gt;这是一个段落。&lt;a href=&quot;http://43.138.70.17:4000/&quot; target=&quot;_blank&quot;&gt;这是一个链接&lt;/a&gt;&lt;/p&gt; &lt;p&gt;这是第二个标签&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 超链接标签 标签的语法格式如下： 1&lt;a href=&quot;&quot; target=&quot;_blank&quot;&gt;这是一个链接&lt;/a&gt; href 属性指定链接的目标，也就是要跳转到什么位置。 target 是可选属性，用来指明新页面的打开方式。 属性值 说明 _self 默认，在现有窗口中打开新页面，原窗口将被覆盖。 _blank 在新窗口中打开新页面，原窗口将被保留。 _parent 在当前框架的上一层打开新页面。 _top 在顶层框架中打开新页面。 &lt;img标签&gt; 标签的语法格式如下： 1&lt;img src=&quot;url&quot; alt=&quot;text&quot;&gt; src 是必选属性，它是 source 的简称，用来指明图片的地址或者路径。 alt 是可选属性，用来定义图片的文字描述信息。 使用 width 和 height 属性来指定图片的宽度和高度。 12&lt;img src=&quot;./html5.png&quot; alt=&quot;HTML5 Logo&quot; width=&quot;100&quot; height=&quot;100&quot;&gt;&lt;img src=&quot;./html5.png&quot; alt=&quot;HTML5 Logo&quot; style=&quot;width: 150px; height: 150px;&quot;&gt; 表格标签12345678910111213141516171819202122&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;mate charset=&quot;utf-8&quot;&gt;&lt;/head&gt;&lt;body&gt; &lt;table&gt; &lt;caption&gt;这是表格的标题&lt;/caption&gt; &lt;tr&gt; &lt;th&gt;name &lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;taweizhong &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;&lt;/body&gt;&lt;/html&gt; 列表标签有序列表12345678910111213141516&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;HTML有序列表&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;p&gt;煮米饭的步骤：&lt;/p&gt; &lt;ol&gt; &lt;li&gt;将水煮沸&lt;/li&gt; &lt;li&gt;加入一勺米&lt;/li&gt; &lt;li&gt;搅拌均匀&lt;/li&gt; &lt;li&gt;继续煮10分钟&lt;/li&gt; &lt;/ol&gt;&lt;/body&gt;&lt;/html&gt; 无序列表12345678910111213141516&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;HTML无序列表&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;p&gt;早餐的种类：&lt;/p&gt; &lt;ul&gt; &lt;li&gt;鸡蛋&lt;/li&gt; &lt;li&gt;牛奶&lt;/li&gt; &lt;li&gt;面包&lt;/li&gt; &lt;li&gt;生菜&lt;/li&gt; &lt;/ul&gt;&lt;/body&gt;&lt;/html&gt; 定义列表12345678&lt;dl&gt; &lt;dt&gt;标题1&lt;dt&gt; &lt;dd&gt;描述文本2&lt;dd&gt; &lt;dt&gt;标题2&lt;dt&gt; &lt;dd&gt;描述文本2&lt;dd&gt; &lt;dt&gt;标题3&lt;dt&gt; &lt;dd&gt;描述文本3&lt;dd&gt;&lt;/dl&gt; 表单标签表单可以接收用户输入的信息，然后将其发送到后端应用程序。 语法如下所示： 123&lt;form action=&quot;URL&quot; method=&quot;GET|POST&quot;&gt; 表单中的其它标签&lt;/form&gt; action 属性用来指明将表单提交到哪个页面。 method 属性表示使用哪个方式提交数据，包括 GET 和 POST 两种方式。 表单属性 属性 可选值 描述 accept MIME_type HTML5 中不再支持，设置服务器要接收的文件类型 accept-charset character_set 设置表单数据的字符集（默认为 HTML 文档字符集） action URL 设置要将表单提交到何处（默认为当前页面） autocomplete on、off 设置是否启用表单的自动完成功能（默认开启） enctype application&#x2F;x-www-form-urlencoded、 multipart&#x2F;form-data、 text&#x2F;plain 设置在提交表单数据之前如何对数据进行编码（适用于 method&#x3D;”post” 的情况） method get、post 设置使用哪种 HTTP 方法来提交表单数据（默认为 get） name text 设置表单的名称 novalidate novalidate 如果使用该属性，则提交表单时不进行验证 target _blank、_self、_parent、_top 设置在何处打开 action 属性设定的链接（默认为 _self） 表单控件 控件&#x2F;标签 描述 &lt;input&gt; 定义输入框 &lt;textarea&gt; 定义文本域（一个可以输入多行文本的控件） &lt;label&gt; 为表单中的各个控件定义标题 &lt;fieldset&gt; 定义一组相关的表单元素，并使用边框包裹起来 &lt;legend&gt; 定义 &lt;fieldset&gt; 元素的标题 &lt;select&gt; 定义下拉列表 &lt;optgroup&gt; 定义选项组 &lt;option&gt; 定义下拉列表中的选项 &lt;button&gt; 定义一个可以点击的按钮 &lt;datalist&gt; 指定一个预先定义的输入控件选项列表 &lt;keygen&gt; 定义表单的密钥对生成器字段 &lt;output&gt; 定义一个计算结果 &amp;emsp HTML空格 12345678910111213141516171819202122232425262728293031323334353637383940&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;HTML form表单演示&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;form action=&quot;./userinfo.php&quot; method=&quot;POST&quot;&gt; &lt;!-- 文本输入框控件 --&gt; &lt;label&gt;用户名： &lt;/label&gt;&lt;input name=&quot;username&quot; type=&quot;text&quot;&gt;&lt;br&gt; &lt;!-- 密码框控件 --&gt; &lt;label&gt;密&amp;emsp;码： &lt;/label&gt;&lt;input name=&quot;password&quot; type=&quot;password&quot;&gt;&lt;br&gt; &lt;!-- 下拉菜单控件 --&gt; &lt;label&gt;性&amp;emsp;别：&lt;/label&gt; &lt;select name=&quot;sex&quot;&gt; &lt;option value=&quot;1&quot;&gt;男&lt;/option&gt; &lt;option value=&quot;2&quot;&gt;女&lt;/option&gt; &lt;option value=&quot;3&quot;&gt;未知&lt;/option&gt; &lt;/select&gt; &lt;br&gt; &lt;!-- 复选框控件 --&gt; &lt;label&gt;爱&amp;emsp;好：&lt;/label&gt; &lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;1&quot;&gt;听音乐 &lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;2&quot;&gt;看电影 &lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;3&quot;&gt;打游戏 &lt;br&gt; &lt;!-- 单选按钮控件 --&gt; &lt;label&gt;学&amp;emsp;历：&lt;/label&gt; &lt;input type=&quot;radio&quot; name=&quot;education&quot; value=&quot;1&quot;&gt;小学 &lt;input type=&quot;radio&quot; name=&quot;education&quot; value=&quot;2&quot;&gt;中学 &lt;input type=&quot;radio&quot; name=&quot;education&quot; value=&quot;3&quot;&gt;本科 &lt;input type=&quot;radio&quot; name=&quot;education&quot; value=&quot;4&quot;&gt;硕士 &lt;input type=&quot;radio&quot; name=&quot;education&quot; value=&quot;5&quot;&gt;博士 &lt;br&gt; &lt;!-- 按钮 --&gt; &lt;input type=&quot;submit&quot; value=&quot;提 交&quot;&gt;&amp;emsp;&amp;emsp; &lt;input type=&quot;reset&quot; value=&quot;重 置&quot;&gt; &lt;/form&gt;&lt;/body&gt;&lt;/html&gt; 块级元素和内联元素块级元素块级元素最主要的特点是它们自己独占一行，块级元素中最具代表性的就是&lt;div&gt;，此外还有&lt;p&gt;、&lt;nav&gt;、&lt;aside&gt;、&lt;header&gt;、&lt;footer&gt;、&lt;section&gt;、&lt;article&gt;、&lt;ul&gt;、&lt;address&gt;、&lt;h1&gt;~&#96;&#96;等。 主要特征如下所示： 块级元素总是在新行上开始； 宽度、高度以及外边距和内边距等都可以控制； 省略块级元素的宽度，那么它的宽度默认为当前浏览器窗口的宽度； 包含其它的内联元素和块级元素。 内联元素内联元素也可以称为行内元素，行内元素中最常用的是&lt;span&gt;，此外还有&lt;b&gt;、&lt;i&gt;、&lt;u&gt;。 主要特征如下所示： 和其他元素会在同一行上显示； 宽、高以及外边距和内边距都不可以改变； 宽度就是其中内容的宽度，且不可以改变； 只能容纳文本或者其他内联元素。 可以通过 line-height 来设置行高； 可以设置 margin 外边距，但只对左右外边距有效，上下无效； 设置 padding 内边距时，只有左右 padding 有效，上下则无效 标签&lt;div&gt;&lt;div&gt;是非常重要的块级标记，在网页布局（Layout）方面发挥着重要的作用，使用&lt;div&gt;我们可以定义页面的各个部分，通过与 CSS 相结合可以实现各种各样的效果。 &lt;div&gt; 标签及其包围的内容可以看做网页的一个板块， 标签本身并没有什么特殊的显示效果，需要借助 CSS 样式对外边距、内边距、背景、边框等进行设置，从而达到对板块布局的目的。 &lt;span&gt;标签HTML 中的&lt;span&gt;标签是一个内联元素，可以对 HTML 文档中的内容进行修饰，此标签不会为文档内容提供任何视觉效果，但可以与 CSS 结合使用来美化网页。 布局HTML5 提出了多个专门用于布局的标签，它们用来定义网页的不同部分，语义更加明确。 标签 说明 &lt;header&gt; 用于定义网页的头部，头部中一般包含一些介绍性的内容，例如网站名称、logo 或者作者的信息。 &lt;nav&gt; 用于定义网页中的导航栏。 &lt;section&gt; 用于在网页中定义一个单独的部分，其中可以包含文本、图像、表格等等。 &lt;section&gt; 代表 HTML 文档中的“节”或“段”，“段”可以理解为一篇文章里按照主题的分段，“节”则可以理解为一个页面里的分组。其主要作用就是对页面的内容进行分块或者对文章的内容进行分段。 &lt;article&gt; 用于定义文章或者其它独立的信息，代表一个页面中自成一体的内容，例如论坛的帖子、博客上的文章、一篇用户的评论等。 &lt;aside&gt; 用于定义网页内容以外的部分，例如网页的侧边栏。 &lt;footer&gt; 用于定义网页的底部，例如作者、版权等信息。 &lt;details&gt; 用于定义一些详细信息，并且可以根据需要隐藏或显示这些详细信息。 &lt;summary&gt; 用于为&lt;details&gt;标签定义标题。","categories":[{"name":"笔记","slug":"笔记","permalink":"http://peapod.top/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"http://peapod.top/tags/HTML/"}],"author":"taweizhong"},{"title":"HTML标签的属性","slug":"HTML标签的属性","date":"2022-08-26T10:59:55.000Z","updated":"2022-09-08T07:20:47.185Z","comments":true,"path":"2022/08/26/HTML标签的属性/","link":"","permalink":"http://peapod.top/2022/08/26/HTML%E6%A0%87%E7%AD%BE%E7%9A%84%E5%B1%9E%E6%80%A7/","excerpt":"","text":"HTML属性属性包含了标签的额外信息，例如： href 属性可以为 标签提供链接地址； src 属性可以为 标签提供图像的路径； style 属性可以为几乎所有标签定义 CSS 样式。 属性需要添加在开始标签中，语法格式为： 12attr=&quot;value&quot;attr 表示属性名，value 表示属性值。属性值必须使用双引号&quot; &quot;或者单引号&#x27; &#x27;包围。 说明： 标签中的 src 属性用来定义图像的路径，alt 属性用来定义图像的描述信息，当图像出现异常无法正常显示时就会显示 alt 中的信息。 标签的 href 属性用来定义链接的地址，target 属性用来定义新页面在浏览器中的打开方式。 通用属性1) idid 属性用来赋予某个标签唯一的名称（标识符），当我们使用 CSS 或者 JavaScript 来操作这个标签时，就可以通过 id 属性来找到这个标签。 2) class与 id 属性类似，class 属性也可以为标签定义名称（标识符），不同的是 class 属性在整个 HTML 文档中不必是唯一的，我们可以为多个标签定义相同的 class 属性值。另外，还可以为一个 HTML 标签定义多个 class 属性值。 3) titletitle 属性用来对标签内容进行描述说明，当鼠标移动到该标签上方时会显示出 title 属性的值。 4) style使用 style 属性我们可以在 HTML 标签内部为标签定义 CSS 样式","categories":[{"name":"笔记","slug":"笔记","permalink":"http://peapod.top/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"http://peapod.top/tags/HTML/"}],"author":"taweizhong"},{"title":"HTML标签的语法格式","slug":"HTML标签的语法格式","date":"2022-08-26T10:59:38.000Z","updated":"2022-09-08T07:22:20.069Z","comments":true,"path":"2022/08/26/HTML标签的语法格式/","link":"","permalink":"http://peapod.top/2022/08/26/HTML%E6%A0%87%E7%AD%BE%E7%9A%84%E8%AF%AD%E6%B3%95%E6%A0%BC%E5%BC%8F/","excerpt":"","text":"标签的语法格式一个 HTML 标签由开始标签、属性、内容和结束标签组成，标签的名称不区分大小写。 注意： 所有 HTML 标签都必须放在尖括号&lt; &gt;内； HTML 中不同的标签可以实现不同的效果； 如果使用了某个标签，则必须使用对应的结束标签来结尾（自闭和标签除外）。 自闭和标签12345&lt;img src=&quot;&quot; alt=&quot;&quot; /&gt;&lt;hr /&gt;&lt;br /&gt;&lt;input type=&quot;text&quot; /&gt;&lt;!-- --&gt; 表示 HTML 注释","categories":[{"name":"笔记","slug":"笔记","permalink":"http://peapod.top/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"http://peapod.top/tags/HTML/"}],"author":"taweizhong"},{"title":"HTML简介","slug":"HTML简介","date":"2022-08-26T10:59:12.000Z","updated":"2022-09-08T07:23:19.300Z","comments":true,"path":"2022/08/26/HTML简介/","link":"","permalink":"http://peapod.top/2022/08/26/HTML%E7%AE%80%E4%BB%8B/","excerpt":"","text":"HTML简介HTML 英文全称是 Hyper Text Markup Language，中文译为“超文本标记语言”，专门用来设计和编辑网页。 1) 超文本也即超越纯文本，这意味着 HTML 文档不仅能包含文本（文字），还能包含图片、音视频、表格、列表、链接、按钮、输入框等高级内容。 2) 标记语言HTML 是一种计算机语言，但它不能编程，只能用来标记网页中的内容。HTML 通过不同的标签来标记不同的内容、格式、布局等。 HTML标签HTML 是一种标记语言，使用各种标签来格式化内容，标签的特点如下所示： HTML 标签由尖括号包围的关键词构成，比如 ； 除了少数标签外，大多数 HTML 标签都是成对出现的； 成对出现的标签中，第一个标签称为开始标签，第二个标签称为结束标签（闭合标签）。 HTML文档结构123456789101112&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;mate charset=&quot;utf8&quot;&gt; &lt;title&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;p&gt;&lt;/p&gt; &lt;h1&gt;&lt;/h1&gt; &lt;input type=&quot;text&quot;/&gt; &lt;/body&gt;&lt;/html&gt; 说明： ：该标签是 HTML 页面的根标签，其他所有的标签都需要在 和 标签之间定义； ：该标签中用来定义 HTML 文档的一些信息，例如标题、编码格式等等； ：用来指明当前网页采用 UTF-8 编码，UTF-8 是全球通用的编码格式，绝大多数网页都采用 UTF-8 编码； ：该标签用来定义网页的标题，网页标题会显示在浏览器的标签栏； ：该标签用来定义网页中我们能通过浏览器看到的所有内容，例如段落、标题、图片、链接等等；","categories":[{"name":"笔记","slug":"笔记","permalink":"http://peapod.top/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"http://peapod.top/tags/HTML/"}]},{"title":"Go函数","slug":"Go函数","date":"2022-08-26T08:31:43.000Z","updated":"2022-09-08T07:38:42.482Z","comments":true,"path":"2022/08/26/Go函数/","link":"","permalink":"http://peapod.top/2022/08/26/Go%E5%87%BD%E6%95%B0/","excerpt":"","text":"第六章：函数简介函数是基本的代码块。函数编写的顺序是无关紧要的，最好把 main() 函数写在文件的前面。 简单的 return 语句也可以用来结束 for 死循环，或者结束一个协程（goroutine）。 Go里面的函数： 普通函数 匿名函数 方法 除了main()、init()函数外，其它所有类型的函数都可以有参数与返回值。 函数参数、返回值以及它们的类型被统称为函数签名。 函数是一等值（first-class value）：它们可以赋值给变量，就像 add := binOp 一样。 函数不能在其它函数里面声明（不能嵌套），不过我们可以通过使用匿名函数 函数参数与返回值函数定义时，它的形参一般是有名字的，不过我们也可以定义没有形参名的函数，只有相应的形参类型，就像这样：func f(int, int, float64)。 在函数调用时，像切片（slice）、字典（map）、接口（interface）、通道（channel）这样的引用类型都是默认使用引用传递（即使没有显式的指出指针）。 命名返回值 命名返回值作为结果形参（result parameters）被初始化为相应类型的零值，当需要返回的时候，我们只需要一条简单的不带参数的return语句。 123456func getX2AndX3_2(input int) (x2 int, x3 int) &#123; x2 = 2 * input x3 = 3 * input // return x2, x3 return&#125; 改变外部变量 传递指针给函数不但可以节省内存（因为没有复制变量的值），而且赋予了函数直接修改外部变量的能力，所以被修改的变量不再需要使用 return 返回。 1234567891011121314package mainimport ( &quot;fmt&quot;)// this function changes reply:func Multiply(a, b int, reply *int) &#123; *reply = a * b&#125;func main() &#123; n := 0 reply := &amp;n Multiply(10, 5, reply) fmt.Println(&quot;Multiply:&quot;, *reply) // Multiply: 50&#125; 变长参数函数的最后一个参数是采用 ...type 的形式，那么这个函数就可以处理一个变长的参数 123456789101112131415161718192021package mainimport &quot;fmt&quot;func main() &#123; x := min(1, 3, 2, 0) fmt.Printf(&quot;The minimum is: %d\\n&quot;, x) slice := []int&#123;7,9,3,5,1&#125; x = min(slice...) fmt.Printf(&quot;The minimum in the slice is: %d&quot;, x)&#125;func min(s ...int) int &#123; if len(s)==0 &#123; return 0 &#125; min := s[0] for _, v := range s &#123; if v &lt; min &#123; min = v &#125; &#125; return min&#125; 变长参数的类型不相同 使用结构体 使用空接口 使用默认的空接口 interface&#123;&#125;，这样就可以接受任何类型的参数 new 和 make 均是用于分配内存：new 用于值类型和用户定义的类型，如自定义结构，make 用于内置引用类型（切片、map 和管道）。 new(T) 分配类型 T 的零值并返回其地址，也就是指向类型 T 的指针 make(T) 返回类型 T 的初始化之后的值，因此它比 new 进行更多的工作。 defer和追踪关键字 defer 允许我们推迟到函数返回之前（或任意位置执行 return 语句之后）一刻才执行某个语句或函数。 123456789101112package mainimport &quot;fmt&quot;func P()&#123; fmt.Print(&quot;P&quot;)&#125;func main()&#123; fmt.Print(&quot;111&quot;) defer P() fmt.Print(&quot;222&quot;)&#125; 当有多个 defer 行为被注册时，它们会以逆序执行 123456789101112package mianimport ( &quot;file&quot;)func main()&#123; //关闭文件 defer file.close() //解锁 mu.Lock() defer mu.Unlock() //关闭数据库连接 defer disconnectFromDB()&#125; 函数作为参数1234567891011package mainimport &quot;fmt&quot;func add(i,j int) int &#123; return i+j&#125;func b(c int, f func (i,j int) int )&#123; return f(c, 2)&#125;func main()&#123; fmt.Print(b(1, add))&#125; 闭包匿名函数的使用 12345678910package mainimport &quot;fmt&quot;func main ()&#123; // 匿名函数 func(i, j int) int &#123;return i+j&#125; // 将匿名函数赋值给变量 变量使用匿名函数 ter := func(i, j int) int &#123;return i+j&#125; ter(2,3) // 匿名函数直接的调用 func(a, b int) int &#123;return a-b&#125; (3, 2)&#125; 函数作为返回值123456789101112package mainimport &quot;fmt&quot;func add(j int) func (i int) int&#123; return func (i int) int&#123; return j +i &#125;&#125;func main()&#123; add(12)&#125; 12345678910111213141516171819package mainimport &quot;fmt&quot;func add() func(i int) int &#123; var x int fmt.Printf(&quot;x: %v\\n&quot;, x) return func(i int) int &#123; x += i return x &#125;&#125;func main() &#123; f := add() fmt.Printf(&quot;f(1): %v\\n&quot;, f(1)) fmt.Printf(&quot;f(2): %v\\n&quot;, f(20))&#125; 闭包函数保存并积累其中的变量的值，不管外部函数退出与否，它都能够继续操作外部函数中的局部变量。 计算函数的执行时间12345678910111213141516171819package mainimport ( &quot;fmt&quot; &quot;time&quot;)func add() &#123; for i := 0; i &lt; 100; i++ &#123; fmt.Printf(&quot;i: %v\\n&quot;, i) &#125;&#125;func main() &#123; start := time.Now() add() end := time.Now() fmt.Print(end.Sub(start))&#125;","categories":[{"name":"笔记","slug":"笔记","permalink":"http://peapod.top/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Go","slug":"Go","permalink":"http://peapod.top/tags/Go/"}],"author":"taweizhong"},{"title":"Go控制结构","slug":"Go控制结构","date":"2022-08-26T08:31:25.000Z","updated":"2022-09-08T07:37:14.074Z","comments":true,"path":"2022/08/26/Go控制结构/","link":"","permalink":"http://peapod.top/2022/08/26/Go%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/","excerpt":"","text":"第五章：控制结构if-else结构12345if condition &#123; //&#125; else &#123; //&#125; 当 if 结构内有 break、continue、goto 或者 return 语句时，Go 代码的常见写法是省略 else 部分 1234if condition &#123; return x&#125;return y 1234if err != nil &#123; fmt.Printf(&quot;Program stopping with error %v&quot;, err) os.Exit(1)&#125; swith结构它可以接受任意形式的表达式： 12345678switch var1 &#123; case val1: ... case val2: ... default: ...&#125; 变量 var1 可以是任何类型，而 val1 和 val2 则可以是同类型的任意值。 一旦成功地匹配到某个分支，在执行完相应代码后就会退出整个 switch 代码块。 继续执行后续分支的代码，可以使用 fallthrough 关键字 12345switch i &#123; case 0: fallthrough case 1: f() // 当 i == 0 时函数也会被调用&#125; 可选的 default 分支可以出现在任何顺序，但最好将它放在最后。它的作用类似与 if-else 语句中的 else，表示不符合任何已给出条件时，执行相关语句。 switch 语句的第二种形式是不提供任何被判断的值（实际上默认为判断是否为 true），然后在每个 case 分支中进行测试不同的条件。 12345678switch &#123; case i &lt; 0: f1() case i == 0: f2() case i &gt; 0: f3()&#125; for结构基于计数器的迭代 1234567package mainimport &quot;fmt&quot;func main() &#123; for i := 0; i &lt; 5; i++ &#123; fmt.Printf(&quot;This is the %d iteration\\n&quot;, i) &#125;&#125; 基于条件判断的迭代 123456789package mainimport &quot;fmt&quot;func main() &#123; var i int = 5 for i &gt;= 0 &#123; i = i - 1 fmt.Printf(&quot;The variable i is now: %d\\n&quot;, i) &#125;&#125; for-range结构 for ix, val := range coll &#123; &#125;。 val 始终为集合中对应索引的值拷贝，因此它一般只具有只读性质，对它所做的任何修改都不会影响到集合中原有的值 123for pos, char := range str &#123;...&#125; 标签和gotofor、switch 或 select 语句都可以配合标签（label）形式的标识符使用，即某一行第一个以冒号（:） 12345678910111213package mainimport &quot;fmt&quot;func main() &#123;LABEL1: // 一般建议使用全部大写字母 for i := 0; i &lt;= 5; i++ &#123; for j := 0; j &lt;= 5; j++ &#123; if j == 4 &#123; continue LABEL1 &#125; fmt.Printf(&quot;i is: %d, and j is: %d\\n&quot;, i, j) &#125; &#125;&#125;","categories":[{"name":"笔记","slug":"笔记","permalink":"http://peapod.top/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Go","slug":"Go","permalink":"http://peapod.top/tags/Go/"}],"author":"taweizhong"},{"title":"Go基本数据类型","slug":"Go基本数据类型","date":"2022-08-26T08:31:00.000Z","updated":"2022-09-08T07:37:50.846Z","comments":true,"path":"2022/08/26/Go基本数据类型/","link":"","permalink":"http://peapod.top/2022/08/26/Go%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/","excerpt":"","text":"第四章（下）：基本数据类型常量常量使用关键字 const 定义，用于存储不会改变的数据。 存储在常量中的数据类型只可以是布尔型、数字型（整数型、浮点型和复数）和字符串型。 1const Pi = 3.14 常量的值必须是能够在编译时就能够确定的。 因为在编译期间自定义函数均属于未知，因此无法用于常量的赋值，但内置函数可以使用，如：len()。 12const Ln2 = 0.693147180559945309417232121458\\ 176568075500134360255254120680009 反斜杠 \\ 可以在常量表达式中作为多行的连接符使用。 常量并行赋值 1const beef,two,c = &quot;eat&quot;,2,&quot;vag&quot; iota 可以被用作枚举值： 12345const ( a = iota b = iota c = iota) 简单地讲，每遇到一次 const 关键字，iota 就重置为 0。. 变量声明变量的一般形式是使用 var 关键字：var identifier type。 123456789var a intvar b boolvar str stringvar ( a int b bool str string) 变量的命名规则遵循骆驼命名法。 全局变量希望能够被外部包所使用，则需要将首个单词的首字母也大写。 变量可以编译期间就被赋值，赋值给变量使用运算符等号 =，可以在运行时对变量进行赋值操作。 12345var a intvar b boola = 15b = true 声明与赋值（初始化）语句也可以组合起来。 12var a int = 15var b bool = false 自动类型推断 12345678910var a = 15var b = falsevar ( a = 15 b = false str = &quot;Go says hello to the world!&quot; numShips = 50 city string) 在函数体内声明局部变量时，应使用简短声明语法 :=，例如： 1a := 1 实例： 123456789101112package mainimport ( &quot;fmt&quot; &quot;runtime&quot; &quot;os&quot;)func main ()&#123; goos := runtime.GOOS fmt.Printf(&quot;%s\\n&quot;,goos) var path string = os.Getenv(&quot;PATH&quot;) fmt.Printf(&quot;%s\\n&quot;,path)&#125; 值类型和引用类型 int、float、bool 和 string 这些基本类型都属于值类型，使用这些类型的变量直接指向存在内存中的值。 数组和结构体这些复合类型是值类型。 指针、切片、映射和通道是引用类型。被引用的变量会存储在堆中，以便进行垃圾回收，且比栈拥有更大的内存空间。 函数 fmt.Sprintf 与 Printf 的作用是完全相同的，不过前者将格式化后的字符串以返回值的形式返回给调用者。 在相同的代码块中，我们不可以再次对于相同名称的变量使用初始化声明，例如：a := 20 就是不被允许的。 1a, b, c := 5, 7, &quot;abc&quot; 交换两个变量的值，则可以简单地使用 a, b = b, a。 init函数 变量除了可以在全局声明中初始化，也可以在 init 函数中初始化。 每个源文件都只能包含一个 init 函数。初始化总是以单线程执行，并且按照包的依赖关系顺序执行。 用途是在开始执行程序之前对数据进行检验或修复，以保证程序状态的正确性。 123456package transimport &quot;math&quot;var Pi float64func init()&#123; Pi = 4*math.Atan(1)&#125; 123456789package mainimport ( &quot;fmt&quot; &quot;./trans&quot;)var twoPi = 2*trams.Pifunc main()&#123; fmt.Printf(twoPi)&#125; init 函数也经常被用在当一个程序开始之前调用后台执行的 goroutine。 1234func init() &#123; // setup preparations go backend()&#125; 基本类型与运算符bool类型只有两个类型相同的值才可以进行比较，如果值的类型是接口，它们也必须都实现了相同的接口。 布尔型的常量和变量也可以通过和逻辑运算符（非 !、和 &amp;&amp;、或 ||）结合来产生另外一个布尔值。 ！非运算符用于取得和布尔值相反的结果。 &amp;&amp;两边的值都为 true 的时候，结果才是 true。 ||两边的值都为 false 的时候，结果才是 false。 在格式化输出时，你可以使用 %t 来表示你要输出的值为布尔型。 数字类型Go 语言支持整型和浮点型数字，并且原生支持复数，其中位的运算采用补码。 Go 也有基于架构的类型，例如：int、uint 和 uintptr。 这些类型的长度都是根据运行程序所在的操作系统类型所决定的： int 和 uint 在 32 位操作系统上，它们均使用 32 位（4 个字节），在 64 位操作系统上，它们均使用 64 位（8 个字节）。 uintptr 的长度被设定为足够存放一个指针即可。 Go 语言中没有 float 类型。（Go语言中只有 float32 和 float64）没有double类型。 int 型是计算最快的一种类型。 float32 精确到小数点后 7 位，float64 精确到小数点后 15 位。 尽可能地使用 float64，因为 math 包中所有有关数学运算的函数都会要求接收这个类型。 前缀 0 来表示 8 进制数（如：077），增加前缀 0x 来表示 16 进制数（如：0xFF），以及使用 e 来表示 10 的连乘（如： 1e3 &#x3D; 1000，或者 6.022e23 &#x3D; 6.022 x 1e23）。 可以使用 a := uint64(0) 来同时完成类型转换和赋值操作，这样 a 的类型就是 uint64。 Go 中不允许不同类型之间的混合使用，但是对于常量的类型限制非常少，因此允许常量之间的混合使用： 12345678package mainfunc main()&#123; var a int var b int32 a = 15 b = a+a //编译错误 b = b+5 //5是常量，可以编译&#125; 格式化说明符 %d 用于格式化整数（%x 和 %X 用于格式化 16 进制表示的数字），%g 用于格式化浮点型（%f 输出浮点数，%e 输出科学计数表示法），%0nd 用于规定输出长度为n的整数，其中开头的数字 0 是必须的。 %n.mg 用于表示数字 n 并精确到小数点后 m 位，除了使用 g 之外，还可以使用 e 或者 f，例如：使用格式化字符串 %5.2e 来输出 3.4 的结果为 3.40e+00。 / 对于整数运算而言，结果依旧为整数，例如：9 / 4 -&gt; 2。 取余运算符只能作用于整数：9 % 4 -&gt; 1。 对于整数和浮点数，你可以使用一元运算符 ++（递增）和 --（递减），但只能用于后缀。 ++ 和 -- 的只能作为语句，而非表达式，因此 n = i++ 这种写法是无效的。 随机数 rand 包实现了伪随机数的生成。 123456789101112131415161718192021package mainimport ( &quot;fmt&quot; &quot;math/rand&quot; &quot;time&quot;)func main()&#123; for i:=0; i&lt;5; i++&#123; a := rand.Int() fmt.Printf(&quot;%d\\n&quot;,r) &#125; for i := 0; i &lt; 5; i++ &#123; r := rand.Intn(8) fmt.Printf(&quot;%d / &quot;, r) &#125; times := int64(time.Now().Nanosecond()) rand.Seed(times) for i := 0; i &lt; 10; i++ &#123; fmt.Printf(&quot;%2.2f / &quot;, 100*rand.Float32()) &#125;&#125; 函数 rand.Intn 返回介于 [0, n) 之间的伪随机数。 类型别名在 type TZ int 中，TZ 就是 int 类型的新名称（用于表示程序中的时区），然后就可以使用 TZ 来操作 int 类型的数据。 新类型不会拥有原类型所附带的方法。 字符类型byte 类型是 uint8 的别名。 Go 同样支持 Unicode（UTF-8），因此字符同样称为 Unicode 代码点或者 runes，并在内存中使用 int 来表示。 rune 也是 Go 当中的一个类型，并且是 int32 的别名。 1var ch byte = 65 或 var ch byte = &#x27;\\x41&#x27; var ch byte = &#39;A&#39;；字符使用单引号括起来。 Unicode 至少占用 2 个字节，所以我们使用 int16 或者 int 类型来表示。如果需要使用到 4 字节，则会加上 \\U 前缀；前缀 \\u 则总是紧跟着长度为 4 的 16 进制数，前缀 \\U 紧跟着长度为 8 的 16 进制数。 123456789101112var ch int = &#x27;\\u0041&#x27;var ch2 int = &#x27;\\u03B2&#x27;var ch3 int = &#x27;\\U00101234&#x27;fmt.Printf(&quot;%d - %d - %d\\n&quot;, ch, ch2, ch3) // integerfmt.Printf(&quot;%c - %c - %c\\n&quot;, ch, ch2, ch3) // characterfmt.Printf(&quot;%X - %X - %X\\n&quot;, ch, ch2, ch3) // UTF-8 bytesfmt.Printf(&quot;%U - %U - %U&quot;, ch, ch2, ch3) // UTF-8 code point65 - 946 - 1053236A - β - r41 - 3B2 - 101234U+0041 - U+03B2 - U+101234 判断是否为字母：unicode.IsLetter(ch) 判断是否为数字：unicode.IsDigit(ch) 判断是否为空白符号：unicode.IsSpace(ch) 包 utf8 拥有更多与 rune 类型相关的函数。 字符串字符串是一种值类型，且值不可变，字符串是字节的定长数组。 Go 中的字符串是根据长度限定，而非特殊字符\\0。 函数 len() 来获取字符串所占的字节长度。 在循环中使用加号 + 拼接字符串并不是最高效的做法，更好的办法是使用函数 strings.Join()。 使用字节缓冲（bytes.Buffer）拼接更加给力。 strings和strconv包Go 中使用 strings 包来完成对字符串的主要操作。 12345678910111213141516171819202122232425262728293031strings.HasPrefix(s, prefix string) bool// 判断字符串 s 是否以 prefix 开头strings.HasSuffix(s, suffix string) bool// 判断字符串 s 是否以 suffix 结尾strings.Contains(s, substr string) bool// 判断字符串 s 是否包含 substrstrings.Index(s, str string) int// Index 返回字符串 str 在字符串 s 中的索引strings.LastIndex(s, str string) int// LastIndex 返回字符串 str 在字符串 s 中最后出现位置的索引strings.IndexRune(s string, r rune) int// 非 ASCII 编码的字符在父字符串中的位置strings.Replace(str, old, new, n) string// Replace 用于将字符串 str 中的前 n 个字符串 old 替换为字符串 new，并返回一个新的字符串，如果 n = -1 则替换所有字符串 old 为字符串 newstrings.Count(s, str string) int// Count 用于计算字符串 str 在字符串 s 中出现的非重叠次数strings.Repeat(s, count int) string// Repeat 用于重复 count 次字符串 s 并返回一个新的字符串strings.TrimSpace(s) 来剔除字符串开头和结尾的空白符号；如果你想要剔除指定字符，则可以使用 strings.Trim(s, &quot;cut&quot;) 来将开头和结尾的 cut 去除掉。strings.Split(s, sep) 用于自定义分割符号来对指定字符串进行分割，同样返回 slice。strings.Join(sl []string, sep string) string// Join 用于将元素类型为 string 的 slice 使用分割符号来拼接组成一个字符串 与字符串相关的类型转换都是通过 strconv 包实现的。 12345678910strconv.Itoa(i int) string// 返回数字 i 所表示的字符串类型的十进制数。strconv.FormatFloat(f float64, fmt byte, prec int, bitSize int) string // 将 64 位浮点型的数字转换为字符串strconv.Atoi(s string) (i int, err error) // 将字符串转换为 int 型。strconv.ParseFloat(s string, bitSize int) (f float64, err error) // 将字符串转换为 float64 型。","categories":[{"name":"笔记","slug":"笔记","permalink":"http://peapod.top/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Go","slug":"Go","permalink":"http://peapod.top/tags/Go/"}],"author":"taweizhong"},{"title":"Go基本结构","slug":"Go基本结构","date":"2022-08-26T08:30:29.000Z","updated":"2022-09-08T07:38:26.627Z","comments":true,"path":"2022/08/26/Go基本结构/","link":"","permalink":"http://peapod.top/2022/08/26/Go%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84/","excerpt":"","text":"第四章（上）：基本结构文件名、关键字与标识符文件名均由小写字母组成，如 scanner.go 。如果文件名由多个部分组成，则使用下划线 _ 对它们进行分隔，scanner_test.go 。 有效的标识符必须以字母（可以使用任何 UTF-8 编码的字符或 _）开头。 _ 本身就是一个特殊的标识符，被称为空白标识符。 程序一般由关键字、常量、变量、运算符、类型和函数组成。 程序的基本结构和要素包、导入与可见性包是结构化代码的一种方式：每个程序都由包（通常简称为 pkg）的概念组成，可以使用自身的包或者从其它包中导入内容。 每个 Go 文件都属于且仅属于一个包。一个包可以由许多以 .go 为扩展名的源文件组成，因此文件名和包名一般来说都是不相同的。 package main表示一个可独立执行的程序，每个 Go 应用程序都包含一个名为 main 的包。 所有的包名都应该使用小写字母。 属于同一个包的源文件必须全部被一起编译，一个包即是编译时的一个单元，因此根据惯例，每个目录都只包含一个包。 每一段代码只会被编译一次 导入包的方式 1234567891011import &quot;fmt&quot;import &quot;os&quot;import &quot;fmt&quot;;import &quot;os&quot;import ( &quot;fmt&quot; &quot;os&quot;)import (&quot;fmt&quot;;&quot;os&quot;) 可见性规则 当标识符以一个大写字母开头，就可以被外部包的代码所使用，这被称为导出；标识符如果以小写字母开头，则对包外是不可见的，但是他们在整个包的内部是可见并且可用。 可以像面向对象语言那样使用点标记来调用：pack1.Thing 函数1func functionname() main 函数是每一个可执行程序所必须包含的，一般来说都是在启动后第一个执行的函数（如果有 init() 函数则会先执行该函数）。 函数简短 1func Sum(a,b int) int &#123;return a+b&#125; 只有当某个函数需要被外部包调用的时候才使用大写字母开头。 注释注释不会被编译，但可以通过 godoc 来使用。 以 // 开头的单行注释。多行注释也叫块注释，均已以 /* 开头，并以 */ 结尾 每一个包应该有相关注释，在 package 语句之前的块注释将被默认认为是这个包的文档说明。 几乎所有全局作用域的类型、常量、变量、函数和被导出的对象都应该有一个合理的注释。如果这种注释（称为文档注释）出现在函数前面，例如函数 Abcd，则要以 &quot;Abcd...&quot; 作为开头。 12345// enterOrbit causes Superman to fly into low Earth orbit, a position// that presents several possibilities for planet salvation.func enterOrbit() error &#123; ...&#125; 类型类型可以是基本类型，如：int、float、bool、string；结构化的（复合的），如：struct、array、slice、map、channel；只描述类型的行为的，如：interface。 结构化的类型没有真正的值，它使用 nil 作为默认值。Go 语言中不存在类型继承。 函数也可以是一个确定的类型，就是以函数作为返回类型。 一个函数可以拥有多返回值，返回类型之间需要使用逗号分割，并使用小括号 () 将它们括起来，如： 1func Functionname (a int,b int) (c int,d int) type 关键字可以定义你自己的类型，你可能想要定义一个结构体，但是也可以定义一个已经存在的类型的别名，如： 1type IZ int 并不是真正意义上的别名，使用这种方法定义之后的类型可以拥有更多的特性，且在类型转换时必须显式转换。 多个类型定义： 12345type ( IZ int FZ float64 STR string) 程序的一般结构 在完成包的 import 之后，开始对常量、变量和类型的定义或声明。 如果存在 init 函数的话，则对该函数进行定义。 如果当前包是 main 包，则定义 main 函数。 然后定义其余的函数，首先是类型的方法，接着是按照 main 函数中先后调用的顺序来定义相关函数。 123456789101112131415161718192021package mainimport ( &quot;fmt&quot;)const PI = 3.14var h float32 = 4type Yuan struct&#123; r float32&#125;func init()&#123;&#125;func main()&#123; y :=&amp;Yuan&#123;9&#125; Fun(y.mianji() * h)&#125;func (y Yuan) mianji() float32&#123; return PI * y.r * y.r&#125;func Fun(v float32)&#123; fmt.Printf(&quot;mianji%f&quot;,v)&#125; 类型转换 Go 语言不存在隐式类型转换，因此所有的转换都必须显式说明。 类型 B 的值 &#x3D; 类型 B(类型 A 的值) 12a := 5.0b := int(5.0)","categories":[{"name":"笔记","slug":"笔记","permalink":"http://peapod.top/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Go","slug":"Go","permalink":"http://peapod.top/tags/Go/"}],"author":"taweizhong"},{"title":"Go编辑于调试","slug":"Go编辑于调试","date":"2022-08-26T08:29:58.000Z","updated":"2022-09-08T07:39:04.343Z","comments":true,"path":"2022/08/26/Go编辑于调试/","link":"","permalink":"http://peapod.top/2022/08/26/Go%E7%BC%96%E8%BE%91%E4%BA%8E%E8%B0%83%E8%AF%95/","excerpt":"","text":"第三章：编辑与调试编辑器与调试器编辑器：**Sublime Text、LiteIDE、GoClipse** 调试器：可用的调试器是 gdb。 基本调试： 在合适的位置使用打印语句输出相关变量的值。 在 fmt.Printf 中使用下面的说明符 %+v 打印包括字段在内的实例的完整信息 %#v 打印包括字段和限定类型名称在内的实例的完整信息。 %T 打印某个类型的完整说明 构建格式化工具 gofmt 并保存格式化后的源文件。 构建应用程序： go build 编译自身包和依赖包。 go install 编译并安装自身包和依赖包。 格式化代码go fmt（gofmt）。这个工具可以将你的源代码格式化成符合官方统一标准的风格，属于语法风格层面上的小型重构。 gofmt –w program.go 会格式化该源文件的代码然后将格式化后的代码覆盖原始内容。 gofmt -w *.go 会格式化并重写所有 Go 源文件。 gofmt map1 会格式化并重写 map1 目录及其子目录下的所有 Go 源文件。。 gofmt 也可以通过在参数 -r 后面加入用双引号括起来的替换规则实现代码的简单重构，规则的格式：&lt;原始内容&gt; -&gt; &lt;替换内容&gt;。 1gofmt -r &#x27;(a) -&gt; a&#x27; -w *.go 生成代码文档go doc 工具会从 Go 程序和包文件中提取顶级声明的首行注释以及每个对象的相关注释，并生成相关文档。 一般用法 go doc package获取包的文档注释 go doc package/subpackage 获取子包的文档注释 go doc package function 获取某个函数在某个包中的文档注释","categories":[{"name":"笔记","slug":"笔记","permalink":"http://peapod.top/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Go","slug":"Go","permalink":"http://peapod.top/tags/Go/"}],"author":"taweizhong"},{"title":"Go安装与运行","slug":"Go安装与运行","date":"2022-08-26T08:29:40.000Z","updated":"2022-09-08T07:39:31.034Z","comments":true,"path":"2022/08/26/Go安装与运行/","link":"","permalink":"http://peapod.top/2022/08/26/Go%E5%AE%89%E8%A3%85%E4%B8%8E%E8%BF%90%E8%A1%8C/","excerpt":"","text":"第二章：安装与运行环境架构2个版本的编译器：Go 原生编译器 gc 和非原生编译器 gccgo，这两款编译器都是在类 Unix 系统下工作 。 Go从1.5版本开始已经实现自举。 Go 语言源文件的扩展名很显然就是 .go。 创建目录时，文件夹名称永远不应该包含空格，而应该使用下划线 “_” 或者其它一般符号代替。 环境变量 $GOROOT 表示 Go 在你的电脑上的安装位置 $GOARCH 表示目标机器的处理器架构 $GOBIN 表示编译器和链接器的安装位置 $GOPATH三个规定的目录：src、pkg 和 bin，这三个目录分别用于存放源码文件、包文件和可执行文件。 Go 编译器支持交叉编译，可以使用 $GOHOSTOS 和 $GOHOSTARCH 设置本地机器的操作系统名称和编译体系结构。 安装目录 /bin：包含可执行文件 /doc：包含示例程序，代码工具，本地文档等 /lib：包含文档模版 /src：包含源代码构建脚本和标准库的包的完整源代码 Go运行时（runtime）代码仍旧运行在 Go 的 runtime当中。似 Java 和 .NET 语言所用到的虚拟机，它负责管理包括内存分配、垃圾回收）、栈处理、goroutine、channel、切片（slice）、map 和反射（reflection）等等。 垃圾回收器Go 拥有简单却高效的标记-清除回收器。","categories":[{"name":"笔记","slug":"笔记","permalink":"http://peapod.top/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Go","slug":"Go","permalink":"http://peapod.top/tags/Go/"}],"author":"taweizhong"},{"title":"Go起源与发展","slug":"Go起源与发展","date":"2022-08-26T08:29:16.000Z","updated":"2022-09-08T07:36:42.205Z","comments":true,"path":"2022/08/26/Go起源与发展/","link":"","permalink":"http://peapod.top/2022/08/26/Go%E8%B5%B7%E6%BA%90%E4%B8%8E%E5%8F%91%E5%B1%95/","excerpt":"","text":"第一章：起源于发展起源与发展Go 语言起源 2007 年，并于 2009 年正式对外发布。 时间轴： 2007 年 9 月 21 日：雏形设计 2009 年 11 月 10日：首次公开发布 2010 年 1 月 8 日：当选 2009 年年度语言 2010 年 5 月：谷歌投入使用 2011 年 5 月 5 日：Google App Engine 支持 Go 语言 主要特性发展目标：将静态语言的安全性和高效性与动态语言的易开发性进行有机结合。是对于网络通信、并发和并行编程的极佳支持，从而更好地利用大量的分布式和多核的计算机。 Go 语言是一门类型安全和内存安全的编程语言。虽然 Go 语言中仍有指针的存在，但并不允许进行指针运算。 重要的特性： 构建速度（编译和链接到机器代码的速度）快。 使用包模式的依赖管理更加的清晰。 执行速度快。 没有类和继承的概念，通过接口（interface）的概念来实现多态性。 使用静态类型，所以它是类型安全的一门语言。 强类型语言，隐式的类型转换是不被允许。 动态语言的特性（通过关键字 var）。 支持交叉编译。 LALR 是 Go 语言的语法标准。 Go语言的用途： 应用于搭载 Web 服务器，存储集群或类似用途的巨型中央服务器的系统编程语言。 实现所谓的复杂事件处理（CEP）。 Go 语言不适合用来开发对实时性要求很高的软件。 通过 recover 和 panic 来替代异常机制","categories":[{"name":"笔记","slug":"笔记","permalink":"http://peapod.top/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Go","slug":"Go","permalink":"http://peapod.top/tags/Go/"}],"author":"taweizhong"},{"title":"Git入门指南","slug":"Git入门指南","date":"2022-08-25T14:06:50.000Z","updated":"2022-09-08T07:39:58.095Z","comments":true,"path":"2022/08/25/Git入门指南/","link":"","permalink":"http://peapod.top/2022/08/25/Git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/","excerpt":"","text":"Git入门指南创建仓库1git init 添加12git add *git add &lt;file&gt; 提交1git commit -m &quot;提交信息&quot; 推送1git push origin master","categories":[{"name":"笔记","slug":"笔记","permalink":"http://peapod.top/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Git","slug":"Git","permalink":"http://peapod.top/tags/Git/"}],"author":"taweizhong"},{"title":"服务器部署","slug":"服务器部署","date":"2022-08-25T12:10:38.000Z","updated":"2022-09-06T13:39:44.000Z","comments":true,"path":"2022/08/25/服务器部署/","link":"","permalink":"http://peapod.top/2022/08/25/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"使用指南","slug":"使用指南","date":"2022-08-25T10:11:34.000Z","updated":"2022-09-08T07:35:41.782Z","comments":true,"path":"2022/08/25/使用指南/","link":"","permalink":"http://peapod.top/2022/08/25/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/","excerpt":"","text":"说明front-matter配置 Key Type Description cover string 封面 layout stirng 页面类型(只有在page页面下生效) subtitle string 小标题&#x2F;描述(只有在page页面生效) toc boolean 是否开启TOC功能(只有在post页面下生效) aplayer boolean 是否启用aplayer播放器(只有在post,page页面下生效) dplayer boolean 是否启用dplayer播放器(只有在post,page页面下生效) tags string 标签（不适用于分页） categories string 分类（不适用于分页） 媒体使用方法image1234&#123;% image url=&quot;https://qiniu.sukoshi.xyz/src/images/68686407_p0.jpg&quot; title=&quot;带描述带图片&quot;%&#125; aplayer 12345678&#123;% aplayer url=&quot;https://qiniu.sukoshi.xyz/public/music/鹿乃 - アイロニ.mp3&quot; name=&quot;アイロニ&quot; artist=&quot;鹿乃&quot; cover=&quot;https://qiniu.sukoshi.xyz/public/music/鹿乃 - アイロニ.jpg&quot; lrc=&quot;https://qiniu.sukoshi.xyz/public/music/鹿乃 - アイロニ.lrc&quot; lrcType=&quot;3&quot;%&#125; dplayer 1234&#123;% dplayer url=&quot;https://qiniu.sukoshi.xyz/video/%E7%BE%8E.mp4&quot; pic=&quot;https://qiniu.sukoshi.xyz/video/%E7%BE%8E.mp4?vframe/jpg/offset/10&quot;%&#125;","categories":[],"tags":[{"name":"说明","slug":"说明","permalink":"http://peapod.top/tags/%E8%AF%B4%E6%98%8E/"}],"author":"taweizhong"}],"categories":[{"name":"Web","slug":"Web","permalink":"http://peapod.top/categories/Web/"},{"name":"笔记","slug":"笔记","permalink":"http://peapod.top/categories/%E7%AC%94%E8%AE%B0/"},{"name":"说明","slug":"说明","permalink":"http://peapod.top/categories/%E8%AF%B4%E6%98%8E/"},{"name":"前端","slug":"前端","permalink":"http://peapod.top/categories/%E5%89%8D%E7%AB%AF/"},{"name":"实用","slug":"实用","permalink":"http://peapod.top/categories/%E5%AE%9E%E7%94%A8/"}],"tags":[{"name":"beego","slug":"beego","permalink":"http://peapod.top/tags/beego/"},{"name":"Go","slug":"Go","permalink":"http://peapod.top/tags/Go/"},{"name":"测试","slug":"测试","permalink":"http://peapod.top/tags/%E6%B5%8B%E8%AF%95/"},{"name":"说明","slug":"说明","permalink":"http://peapod.top/tags/%E8%AF%B4%E6%98%8E/"},{"name":"Gin","slug":"Gin","permalink":"http://peapod.top/tags/Gin/"},{"name":"css","slug":"css","permalink":"http://peapod.top/tags/css/"},{"name":"vim","slug":"vim","permalink":"http://peapod.top/tags/vim/"},{"name":"HTML","slug":"HTML","permalink":"http://peapod.top/tags/HTML/"},{"name":"Git","slug":"Git","permalink":"http://peapod.top/tags/Git/"}]}